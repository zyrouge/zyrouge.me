class s{static BREAKPOINT_MD=768;static random(t){const e="ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890-=&".split("");return Array(t).fill(null).map(()=>e[Math.floor(Math.random()*e.length)])}static elementIsVisible(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)}static months=["January","February","March","April","May","June","July","August","September","October","November","December"];static prettyDateParse(t){return s.prettyDate(new Date(t))}static prettyDate(t){return`${s.months[t.getMonth()]}, ${t.getDate()} ${t.getFullYear()}`}static renderSimpleMarkdown(t){return t.replaceAll(/\*\*(.*?)\*\*/g,r=>`<b>${r.slice(2,-2)}</b>`)}static getHtmlSafeId(t){return t.toLowerCase().replaceAll(/[^\w\d]/g,"-")}static extractAstroId(t){const e="data-astro-cid-";for(const r of t.attributes)if(r.name.startsWith(e))return r.name;throw new Error("Unable to find astro content id")}}class o{constructor(t){this.ms=t}_promiseWithResolvers;_timeout;started=!1;ended=!1;cancelled=!1;start(){if(this.started)throw new Error("Timeout was already started");if(this.ended)throw new Error("Timeout has already ended");const t=Promise.withResolvers();return this._promiseWithResolvers=t,this.started=!0,this._timeout=setTimeout(()=>{delete this._timeout,delete this._promiseWithResolvers,this.ended=!0,t.resolve()},this.ms),this._promiseWithResolvers.promise}cancel(){if(!this._promiseWithResolvers)throw new Error("Timeout is not active");this.ended=!0,this.cancelled=!0,clearTimeout(this._timeout),this._promiseWithResolvers.reject(new Error("Timeout interrupted"))}}export{o as C,s as U};
